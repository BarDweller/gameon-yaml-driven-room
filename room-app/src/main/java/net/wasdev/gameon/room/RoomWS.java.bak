/*******************************************************************************
 * Copyright (c) 2015 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package net.wasdev.gameon.room;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.function.Consumer;
import java.util.logging.Level;

import javax.json.Json;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.websocket.CloseReason;
import javax.websocket.Endpoint;
import javax.websocket.EndpointConfig;
import javax.websocket.MessageHandler;
import javax.websocket.Session;

import org.apache.http.HttpEntity;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.eclipse.microprofile.metrics.annotation.Counted;
import org.eclipse.microprofile.metrics.annotation.Metered;
import org.eclipse.microprofile.metrics.annotation.Timed;
import org.eclipse.microprofile.opentracing.Traced;
import org.ozzy.model.Item;
import org.ozzy.model.Room;
import org.ozzy.model.Story;
import org.ozzy.runtime.RoomEngine;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;

/**
 * WebSocket endpoint for player's interacting with the room
 */
public class RoomWS extends Endpoint {

  private final RoomEngine room;
  private final LifecycleManager.SessionRoomResponseProcessor srrp;
  private Map<Session, MessageHandler.Whole<String>> handlersBySession = new ConcurrentHashMap<Session, MessageHandler.Whole<String>>();

  public RoomWS(RoomEngine room, LifecycleManager.SessionRoomResponseProcessor srrp) {
    this.room = room;
    this.srrp = srrp;
  }

  private static class SessionMessageHandler implements MessageHandler.Whole<String> {
    private final Session session;
    private final RoomWS owner;

    public SessionMessageHandler(Session session, RoomWS owner) {
      this.session = session;
      this.owner = owner;
    }

    @Override
    public void onMessage(String message) {
      try {
        owner.receiveMessage(message, session);
      } catch (IOException io) {
        Log.log(Level.SEVERE, this, "IO Exception sending message to session", io);
      }
    }
  }

  @Override
  @Traced
  @Timed(name = "websocket_onOpen_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "websocket_onOpen_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "websocket_onOpen_meter", reusable = true, tags = "label=websocket")
  public void onOpen(final Session session, EndpointConfig ec) {
    Log.log(Level.FINE, this, "onOpen called against room " + this.room.getId());

    // send ack
    try {
      JsonObjectBuilder ack = Json.createObjectBuilder();
      JsonArrayBuilder versions = Json.createArrayBuilder();
      versions.add(1);
      ack.add("version", versions.build());
      String msg = "ack," + ack.build().toString();
      Log.log(Level.FINE, this, "ROOM(ack): sending to session {0} messsage {1}", session.getId(), msg);
      session.getBasicRemote().sendText(msg);
    } catch (IOException io) {
      Log.log(Level.WARNING, this, "Error sending ack", io);
    }

    // session debug.
    debugDumpSessionInfo();

    // (lifecycle) Called when the connection is opened
    srrp.addSession(session);

    // add handler if needed, or use existing one.
    MessageHandler.Whole<String> handlerForSession = new SessionMessageHandler(session, this);
    MessageHandler.Whole<String> fromMap = handlersBySession.get(session);
    MessageHandler.Whole<String> chosen = fromMap != null ? fromMap : handlerForSession;
    handlersBySession.put(session, chosen);

    session.addMessageHandler(String.class, chosen);

    // session debug.
    Log.log(Level.FINE, this, "after opOpen room " + this.room.getId());
    debugDumpSessionInfo();
  }

  private void debugDumpSessionInfo() {
    if (srrp.getSessions().size() == 0) {
      Log.log(Level.FINE, this, " No sessions known.");
    }
    for (Session s : srrp.getSessions()) {
      Log.log(Level.FINE, this, " Session: " + s.getId());
      Log.log(Level.FINE, this, "   handlers: " + s.getMessageHandlers().size());
      int mhc = 0;
      for (MessageHandler m : s.getMessageHandlers()) {
        if (m instanceof SessionMessageHandler) {
          SessionMessageHandler smh = (SessionMessageHandler) m;
          Log.log(Level.FINE, this, "    [" + mhc + "] SessionMessageHandler for session " + smh.session.getId()
              + " linked to room " + smh.owner.room.getId());
        } else {
          Log.log(Level.FINE, this, "    [" + mhc + "] unknown handler");
        }
        mhc++;
      }
    }
  }

  @Override
  @Traced
  @Timed(name = "websocket_onClose_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "websocket_onClose_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "websocket_onClose_meter", reusable = true, tags = "label=websocket")
  public void onClose(Session session, CloseReason reason) {
    // (lifecycle) Called when the connection is closed, treat this as the
    // player has left the room
    srrp.removeSession(session);
    MessageHandler handler = handlersBySession.remove(session);
    if (handler != null) {
      session.removeMessageHandler(handler);
    }

    Log.log(Level.FINE, this, "onClose called against room " + this.room.getId());
    for (Session s : srrp.getSessions()) {
      Log.log(Level.FINE, this, " Session: " + s.getId());
      Log.log(Level.FINE, this, "   handlers: " + s.getMessageHandlers().size());
      int mhc = 0;
      for (MessageHandler m : s.getMessageHandlers()) {
        if (m instanceof SessionMessageHandler) {
          SessionMessageHandler smh = (SessionMessageHandler) m;
          Log.log(Level.FINE, this, "    [" + mhc + "] SessionMessageHandler for session " + smh.session.getId()
              + " linked to room " + smh.owner.room.getId());
        } else {
          Log.log(Level.FINE, this, "    [" + mhc + "] unknown handler");
        }
        mhc++;
      }
    }
  }

  @Traced
  @Timed(name = "receiveMessage_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "receiveMessage_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "receiveMessage_meter", reusable = true, tags = "label=websocket")
  public void receiveMessage(String message, Session session) throws IOException {
    Log.log(Level.FINE, this, "ROOMX: [{0}:{1}] sess[{2}:{3}] : {4}", this.hashCode(), this.room.getId(),
        session.hashCode(), session.getId(), message);
    String[] contents = Message.splitRouting(message);
    if (contents[0].equals("roomHello")) {
      addNewPlayer(session, contents[2]);
      return;
    }
    if (contents[0].equals("room")) {
      processCommand(contents[2]);
      return;
    }
    if (contents[0].equals("roomGoodbye")) {
      removePlayer(session, contents[2]);
      return;
    }
    Log.log(Level.SEVERE, this, "Unknown Message Type {0} for room {1} message {2}", contents[0], room.getId(),
        message);
  }

  private static class StreamConsumer implements Runnable {
    private InputStream is;
    private Consumer<String> c;

    public StreamConsumer(InputStream is, Consumer<String> c) {
      this.is = is;
      this.c = c;
    }

    @Override
    public void run() {
      new BufferedReader(new InputStreamReader(is)).lines().forEach(c);
    }
  }

  private void triggerWebAppReload() {
    System.out.println("poking file for reload");
    try {
      Process process;

      System.out.println("using runtime exec");
      process = Runtime.getRuntime().exec("touch /opt/ol/wlp/usr/servers/defaultServer/apps/room-app.war");

      StreamConsumer sc = new StreamConsumer(process.getInputStream(), System.out::println);
      Executors.newSingleThreadExecutor().submit(sc);
      int exitCode = process.waitFor();
      System.out.println("exec code " + exitCode);
    } catch (Exception e) {
      System.out.println("poke failure during reload.. ");
      e.printStackTrace();
    }
  }
  
  private InputStream readFromHttp(String url) throws ClientProtocolException, IOException {
    CloseableHttpClient httpclient = HttpClients.createDefault();
    HttpGet httpget = new HttpGet(url);
    CloseableHttpResponse response = httpclient.execute(httpget);
    byte[] data = null;
    try {
      HttpEntity entity = response.getEntity();
      if (entity != null) {
        data = EntityUtils.toByteArray(entity);
      } else {
        throw new IOException("Unable to load yaml");
      }
    } finally {
      response.close();
    }
    return new ByteArrayInputStream(data);
  }

  private Story parseYaml(InputStream inputStream) {
    Constructor c = new Constructor(Story.class);
    Yaml yaml = new Yaml(c);
    Story s = yaml.load(inputStream);
    return s;
  }  

  // process a command
  private void processCommand(String json) throws IOException {
    Log.log(Level.FINE, this, "Command received from the user, " + this);
    JsonObject msg = Json.createReader(new StringReader(json)).readObject();

    String content = Message.getValue(msg.get("content"));
    String userid = Message.getValue(msg.get(Constants.USERID));

    if ("/ydebug commands".equals(content.toLowerCase())) {
      String ymsg = "DEBUG: I know the following commands\n";
      for (String key : room.commandHandlers.keySet()) {
        ymsg += "* **" + key + "**\n";
      }
      srrp.playerEvent(userid, ymsg, null);
    } else if ("/ydebug items".equals(content.toLowerCase())) {
      String ymsg = "DEBUG: I know the following items in this room\n";
      if (room.room.getItems() != null) {
        for (Item i : room.room.getItems()) {
          ymsg += "* **" + i.getName() + "**\n";
        }
      }
      srrp.playerEvent(userid, ymsg, null);
    } else if ("/ydebug state".equals(content.toLowerCase())) {
      String ymsg = "DEBUG: I know the following state vars\n";
      if (room.stateById.size() > 0) {
        for (Map.Entry<String, Object> kv : room.stateById.entrySet()) {
          ymsg += "* **" + kv.getKey() + "** -> " + kv.getValue() + "\n";
        }
      }
      srrp.playerEvent(userid, ymsg, null);
    } else if ("/ydebug actionmap".equals(content.toLowerCase())) {
      srrp.playerEvent(userid, "DEBUG: actionmap currently has " + room.actionMap.size() + " entries.", null);
    } else if ("/ydebug reload".equals(content.toLowerCase())) {
      srrp.playerEvent(userid, "DEBUG: Reload Requested.. parsing new yaml & checking for issues", null);
      InputStream is = readFromHttp("https://raw.githubusercontent.com/suehle/gameon-yaml-driven-room/main/roomyaml-all-br");
      try {
        Story s = parseYaml(is);
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        pw.println("DEBUG: ---ooOO[[[ Validating...  ]]]OOoo---\n");
        for(Room t : s.getRooms()) {
          //verification step for testing.
          RoomEngine.verifyRoom(s.getVars(), s.getCommands(), t, pw);
        }
        pw.println("");
        pw.flush();
        srrp.playerEvent(userid, sw.toString(), null);
        srrp.playerEvent(userid, "DEBUG: Triggering **full app restart**.. this will take a mo.. ", "The world is being rebooted, please wait.");
        triggerWebAppReload();
      }catch(Exception e) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);
        srrp.playerEvent(userid, "DEBUG: Error processing yaml: \n\n  "+sw.toString(), null);
      }
    } else {

      if (content.startsWith("/")) {
        room.command(userid, content.substring(1));
      } else {
        String username = Message.getValue(msg.get(Constants.USERNAME));
        if (username == null) {
          Log.log(Level.WARNING, this, "Recieved chat msg with missing username : {0}", json);
          username = userid;
        }
        // everything else is chat.
        srrp.chatEvent(username, content);
      }
    }
  }

  // add a new player to the room
  @Traced
  @Timed(name = "addNewPlayer_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "addNewPlayer_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "addNewPlayer_meter", reusable = true, tags = "label=websocket")
  private void addNewPlayer(Session session, String json) throws IOException {

    JsonObject msg = Json.createReader(new StringReader(json)).readObject();
    String username = Message.getValue(msg.get(Constants.USERNAME));
    String userid = Message.getValue(msg.get(Constants.USERID));

    Log.log(Level.INFO, this, "*** Adding player {0} from room {1} via session {2}", userid, room.getId(),
        session.getId());

    room.addUserToRoom(userid, username);
    room.command(userid, "look");
  }

  @Traced
  @Timed(name = "removePlayer_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "removePlayer_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "removePlayer_meter", reusable = true, tags = "label=websocket")
  private void removePlayer(Session session, String json) throws IOException {
    JsonObject msg = Json.createReader(new StringReader(json)).readObject();
    String userid = Message.getValue(msg.get(Constants.USERID));
    Log.log(Level.INFO, this, "*** Removing player {0} from room {1} via session {2}", userid, room.getId(),
        session.getId());
    room.removeUserFromRoom(userid);
  }

  @Override
  @Traced
  @Timed(name = "websocket_onError_timer", reusable = true, tags = "label=websocket")
  @Counted(name = "websocket_onError_count", monotonic = true, reusable = true, tags = "label=websocket")
  @Metered(name = "websocket_onError_meter", reusable = true, tags = "label=websocket")
  public void onError(Session session, Throwable thr) {
    // (lifecycle) Called if/when an error occurs and the connection is
    // disrupted
    Log.log(Level.WARNING, this, "onError called on WebSocket", thr);
  }

}
